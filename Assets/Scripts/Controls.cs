//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""StartMovement"",
            ""id"": ""cb59f6a0-37b1-4bd9-88ab-bdbe6272f305"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Button"",
                    ""id"": ""e75f77d2-1a0e-41ef-a045-cbef3fc9ff90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ae7f2a9-f325-4e23-8466-e81dfb18076a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // StartMovement
        m_StartMovement = asset.FindActionMap("StartMovement", throwIfNotFound: true);
        m_StartMovement_move = m_StartMovement.FindAction("move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StartMovement
    private readonly InputActionMap m_StartMovement;
    private List<IStartMovementActions> m_StartMovementActionsCallbackInterfaces = new List<IStartMovementActions>();
    private readonly InputAction m_StartMovement_move;
    public struct StartMovementActions
    {
        private @Controls m_Wrapper;
        public StartMovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_StartMovement_move;
        public InputActionMap Get() { return m_Wrapper.m_StartMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartMovementActions set) { return set.Get(); }
        public void AddCallbacks(IStartMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_StartMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StartMovementActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IStartMovementActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IStartMovementActions instance)
        {
            if (m_Wrapper.m_StartMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStartMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_StartMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StartMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StartMovementActions @StartMovement => new StartMovementActions(this);
    public interface IStartMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
